apiVersion: v1
kind: Pod
metadata:
  name: client-0001-pg
  labels:
    name: client-0001-pg
spec:
  containers:
    - image: launcher.gcr.io/google/postgresql10
      name: postgres
      env:
        - name: POSTGRES_PASSWORD
          value: password
      volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: data
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: client-0001-pg
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: client-0001-pg
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 25Gi
---
apiVersion: v1
kind: Service
metadata:
  name: client-0001-pg-lb
  labels:
    app: client-0001-pg
spec:
  type: LoadBalancer
  selector:
    app: client-0001-pg
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: client-0001-pg-ip
  labels:
    app: client-0001-pg
spec:
  type: ClusterIP
  selector:
    app: client-0001-pg
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Pod
metadata:
  name: client-0001-app
  labels:
    name: client-0001-app
spec:
  containers:
    - image: eu.gcr.io/jetti-pg/jetti
      name: jetti
      ports:
        - containerPort: 8080
      env:
        - name: POSTGRES_DB_HOST
          value: client-0001-pg-ip
        - name: POSTGRES_DB_USER
          value: postgres
        - name: POSTGRES_DB_PASSWORD
          value: password
        - name: REDIS_DB_HOST
          value: redis-master
---
apiVersion: v1
kind: Service
metadata:
  name: client-0001-app-ip
  labels:
    app: client-0001-app
spec:
  type: NodePort
  selector:
    app: client-0001-app
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jetti
  annotations:
    kubernetes.io/ingress.global-static-ip-name: jetti-ip
    kubernetes.io/ingress.allow-http: "false"
  labels:
    app: jetti
spec:
  tls:
  - secretName: jetti-ssl
  backend:
    serviceName: jetti
    servicePort: 8080
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: jetti
          servicePort: 8080
      - path: /client-0001-app
        backend:
          serviceName: client-0001-app-ip
          servicePort: 8080