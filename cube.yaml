apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: jetti
  labels:
    app: jetti
spec:
  template:
    metadata:
      labels:
        app: jetti
        tier: web
    spec:
      containers:
        - name: jetti
          image: eu.gcr.io/jetti-pg/jetti:latest
          ports:
            - containerPort: 8080
          # The following environment variables will contain the database host,
          # user and password to connect to the PostgreSQL instance.
          env:
            - name: POSTGRES_DB_HOST
              value: 127.0.0.1:5432
            # [START cloudsql_secrets]
            - name: POSTGRES_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            # [END cloudsql_secrets]
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                    "-instances=jetti-pg:europe-west3:jetti-pg=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/ssl/certs
            - name: cloudsql
              mountPath: /cloudsql
         # [START proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
        - name: cloudsql
          emptyDir:
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
      # [END volumes]
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jetti
  annotations:
    kubernetes.io/ingress.global-static-ip-name: jetti-ip
    kubernetes.io/ingress.allow-http: "false"
  labels:
    app: jetti
spec:
  backend:
    serviceName: jetti
    servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: jetti
  labels:
    app: jetti
spec:
  sessionAffinity: ClientIP
  type: NodePort
  selector:
    app: jetti
    tier: web
  ports:
  - port: 8080
    targetPort: 8080


#kubectl apply -f cube.yaml
#docker build --rm -f Dockerfile -t jetti-fs-mat:latest .
#docker tag jetti-fs-mat eu.gcr.io/jetti-pg/jetti-fs-mat
#gcloud docker -- push eu.gcr.io/jetti-pg/jetti-fs-mat

#docker tag jetti-fs-mat jetti.azurecr.io/jetti-fs-mat
#docker push jetti.azurecr.io/jetti-fs-mat

#gcloud sql users create proxyuser host --instance=jetti-pg --password=Pa5315word
#kubectl create secret generic cloudsql-db-credentials --from-literal=username=proxyuser --from-literal=password=Pa5315word
#kubectl create secret generic cloudsql-instance-credentials --from-file=credentials.json=Downloads/jetti-pg-fca1f23ebf41.json 